/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Waypoint as PrismaWaypoint,
  Route as PrismaRoute,
} from "@prisma/client";

export class WaypointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WaypointCountArgs, "select">): Promise<number> {
    return this.prisma.waypoint.count(args);
  }

  async waypoints(
    args: Prisma.WaypointFindManyArgs
  ): Promise<PrismaWaypoint[]> {
    return this.prisma.waypoint.findMany(args);
  }
  async waypoint(
    args: Prisma.WaypointFindUniqueArgs
  ): Promise<PrismaWaypoint | null> {
    return this.prisma.waypoint.findUnique(args);
  }
  async createWaypoint(
    args: Prisma.WaypointCreateArgs
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.create(args);
  }
  async updateWaypoint(
    args: Prisma.WaypointUpdateArgs
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.update(args);
  }
  async deleteWaypoint(
    args: Prisma.WaypointDeleteArgs
  ): Promise<PrismaWaypoint> {
    return this.prisma.waypoint.delete(args);
  }

  async getRoute(parentId: string): Promise<PrismaRoute | null> {
    return this.prisma.waypoint
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
