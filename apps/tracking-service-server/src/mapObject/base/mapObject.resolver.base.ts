/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MapObject } from "./MapObject";
import { MapObjectCountArgs } from "./MapObjectCountArgs";
import { MapObjectFindManyArgs } from "./MapObjectFindManyArgs";
import { MapObjectFindUniqueArgs } from "./MapObjectFindUniqueArgs";
import { CreateMapObjectArgs } from "./CreateMapObjectArgs";
import { UpdateMapObjectArgs } from "./UpdateMapObjectArgs";
import { DeleteMapObjectArgs } from "./DeleteMapObjectArgs";
import { MapObjectService } from "../mapObject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MapObject)
export class MapObjectResolverBase {
  constructor(
    protected readonly service: MapObjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "read",
    possession: "any",
  })
  async _mapObjectsMeta(
    @graphql.Args() args: MapObjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MapObject])
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "read",
    possession: "any",
  })
  async mapObjects(
    @graphql.Args() args: MapObjectFindManyArgs
  ): Promise<MapObject[]> {
    return this.service.mapObjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MapObject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "read",
    possession: "own",
  })
  async mapObject(
    @graphql.Args() args: MapObjectFindUniqueArgs
  ): Promise<MapObject | null> {
    const result = await this.service.mapObject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MapObject)
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "create",
    possession: "any",
  })
  async createMapObject(
    @graphql.Args() args: CreateMapObjectArgs
  ): Promise<MapObject> {
    return await this.service.createMapObject({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MapObject)
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "update",
    possession: "any",
  })
  async updateMapObject(
    @graphql.Args() args: UpdateMapObjectArgs
  ): Promise<MapObject | null> {
    try {
      return await this.service.updateMapObject({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MapObject)
  @nestAccessControl.UseRoles({
    resource: "MapObject",
    action: "delete",
    possession: "any",
  })
  async deleteMapObject(
    @graphql.Args() args: DeleteMapObjectArgs
  ): Promise<MapObject | null> {
    try {
      return await this.service.deleteMapObject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
